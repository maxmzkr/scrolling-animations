// compressed!
// Generated by CoffeeScript 1.4.0
var Word;

Word = (function() {

  function Word(values) {
    var _ref, _ref1, _ref2, _ref3, _ref4;
    values = values != null ? values : {};
    this.selector = (_ref = values.selector) != null ? _ref : '';
    this.x = (_ref1 = values.x) != null ? _ref1 : 0;
    this.y = (_ref2 = values.y) != null ? _ref2 : 0;
    this.xOrigin = (_ref3 = values.xOrigin) != null ? _ref3 : 0;
    this.yOrigin = (_ref4 = values.yOrigin) != null ? _ref4 : 0;
  }

  Word.prototype.center = function() {
    var cumWidth, cumWidthLast, elem, widths;
    cumWidth = 0;
    cumWidthLast = 0;
    widths = (function() {
      var _i, _len, _ref, _results;
      _ref = $(this.selector);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elem = _ref[_i];
        cumWidthLast = cumWidth;
        cumWidth += $(elem).width();
        _results.push(cumWidthLast);
      }
      return _results;
    }).call(this);
    widths = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = widths.length; _i < _len; _i++) {
        elem = widths[_i];
        _results.push(elem - cumWidth / 2);
      }
      return _results;
    })();
    return widths;
  };

  return Word;

})();
/**
 * used to determine if the variable is a function
 * @param {any} isFunction the thing to test
 */
is_function = function(isFunction) {
  var getType = {};
  return isFunction && getType.toString.call(isFunction) === '[object Function]';
}

/**
 * used to determine if the variable is a string
 * @param {object} obj the object to test
 */
var toString = Object.prototype.toString;

isString = function (obj) {
  return toString.call(obj) == '[object String]';
}

default_val = function(override, defaultVal) {
  return override === undefined ? defaultVal : override;
}

/**
 * animation object
 * @param {object} values default values
 * @param {object} page the page to run this animation on
 */
Animation = function(values, page) {
  values = default_val(values, {});
  this.debug = default_val(values.debug, false);
  
  // this is used to create the default keyword values
  // apish crap here
  this.default_animation(values);
  this.default_x_origin(values);
  this.default_y_origin(values);


  this.selector = default_val(values.selector, ''); 
  this.startX = default_val(values.startX, 0);
  this.startY = default_val(values.startY, 0);
  this.endX = default_val(values.endX, 0);
  this.endY = default_val(values.endY, 0);
  this.startScroll = default_val(values.startScroll, 0);
  this.endScroll = default_val(values.endScroll, 0);
  this.type = default_val(values.type, 'linear');
  this.xCenter = default_val(values.xCenter, true);
  this.yCenter = default_val(values.yCenter, false);
  this.xOrigin = default_val(values.xOrigin, 0);
  this.yOrigin = default_val(values.yOrigin, 0);
  this.extremaLow = default_val(values.extremaLow, false);
  this.extremaHigh = default_val(values.extremaHigh, false);
  this.startRot = default_val(values.startRot, 0);
  this.endRot = default_val(values.endRot, 0);
  this.xEase = default_val(values.xEase, 'ease');
  this.yEase = default_val(values.yEase, 'ease');
  this.rotEase = default_val(values.rotEase, 'ease');
  this.page = page;
};

/**
 * used to create default animation
 * @param {object} values default values overrides default animations
 */
Animation.prototype.default_animation = function(values) {
  // default animations below!!!
  if (values.defaultAnimation == 'flyout bottom' ||
      values.defaultAnimation == 'flyout') {
    // fly out bottom animation
    // default for fly out
    var self = this;
    values.endX = default_val(values.startX, 0);
    values.endY = default_val(values.endY,
      function() {
        return $(window).height() + self.get_y_origin();
      }
    );
    values.xEase = default_val(values.xEase, false);
  } else if (values.defaultAnimation == 'flyout top') {
    // flyout top animation
    var self = this;
    values.endX = default_val(values.startX, 0);
    values.endY = default_val(values.endY,
      function() {
        return -1*$(window).height() - self.get_y_origin();
      }
    );
    values.xEase = default_val(values.xEase, false);
  } else if (values.defaultAnimation == 'flyout left') {
    // flyout left animation
    var self = this;
    values.endY = default_val(values.startY, 0);
    values.endX = default_val(values.endX,
      function() {
        return -1*$(window).width() - self.get_x_origin();
      }
    );
    values.yEase = default_val(values.yEase, false);
  } else if (values.defaultAnimation == 'flyout right') {
    // flyout right animation
    var self = this;
    values.endY = default_val(values.startY, 0);
    values.endX = default_val(values.endX,
      function() {
        return $(window).width() + self.get_x_origin();
      }
    );
    values.yEase = default_val(values.yEase, false);
    // flyout top animation
  }
}

/**
 * used to create default x origin
 * @param {object} values default values overrides default x origin
 */
Animation.prototype.default_x_origin = function(values) {
  if (values.xOrigin == 'center') {
    var self = this;
    values.xOrigin = function() {
      return $(self.selector).width()/2;
    }
  }
  values.xOrigin = default_val(values.xOrigin, 0);};

/**
 * used to create default y origin
 * @param {object} values default values overrides default x origin
 */
Animation.prototype.default_y_origin = function(values) {
  if (values.yOrigin == 'center') {
    var self = this;
    values.yOrigin = function() {
      console.log($(self.selector).height());
      return $(self.selector).height()/2;
    }
  }
  values.yOrigin = default_val(values.yOrigin, 0);
};

/**
 * used to determine what the scroll should be
 */
Animation.prototype.get_scroll = function() {
  var scroll = $(window).scrollTop() - this.page.animationOffset;
  if (scroll > this.endScroll && this.extremaHigh == true) {
    scroll = this.endScroll;
  }
  if (scroll < this.startScroll && this.extremaLow == true) {
    scroll = this.startScroll;
  }
  console.log(scroll);
  return scroll;
}

/**
 * used to determine if the animation should animate
 */
Animation.prototype.should_animate = function() {
  var scroll = this.get_scroll();
  return scroll >= this.startScroll && scroll <= this.endScroll;
}

/**
 * used to get a value that could be a function
 * @param {object} value the possible function
 */
Animation.prototype.get_possible_function = function(value) {
  if (is_function(value)) {
    return value.call();
  } else {
    return value;
  }
};

/**
 * used to get x origin, usefull because x origin may be a function
 */
Animation.prototype.get_x_origin = function() {
  return this.get_possible_function(this.xOrigin)
};


/**
 * used to get y origin, usefull because y origin may be a function
 */
Animation.prototype.get_y_origin = function() {
  return this.get_possible_function(this.yOrigin)
};

/**
 * used to get the x value for the animation
 */
Animation.prototype.get_x = function() {
  var x = this.get_value(this.startX, this.endX, this.xEase);

  // center if need be
  if (this.xCenter == true) {
    x += $(window).width()/2;
  }

  x -= this.get_x_origin();

  return x;
};

/**
 * used to get the y value for the animation
 */
Animation.prototype.get_y = function() {
  var y = this.get_value(this.startY, this.endY, this.yEase);

  // center if need be
  if (this.yCenter == true) {
    y += $(window).height()/2;
  }

  // add the origin
  y -= this.get_y_origin();

  return y;
};

/**
 * used to get the rotation value
 */
Animation.prototype.get_rot = function() {
  var rot = this.get_value(this.startRot, this.endRot, this.rotEase);
}

/**
 * used to get the y value for the animation
 * @param {object} animation the animation to get y value for
 */
Animation.prototype.get_value = function(startValue, endValue, ease) {
  var startScroll = this.startScroll;
  var endScroll = this.endScroll;
  var scroll = this.get_scroll();
  if (this.should_animate()) {
    if (is_function(startValue)) {
      startValue = startValue.call();
    }
    if (is_function(endValue)) {
      endValue = endValue.call();
    }
    if (isString(startValue)) {
      if (startValue.match(/[0-9]*\.?[0-9]+%/)) {
        var percent = parseFloat(startValue);
        percent = percent/100;
        startValue = $(window).height()*percent;
      }
    }
    if (isString(endValue)) {
      if (endValue.match(/[0-9]*\.?[0-9]+%/)) {
        var percent = parseFloat(endValue);
        percent = percent/100;
        endValue = $(window).height()*percent;
      }
    }

    var t = (scroll - startScroll)/(endScroll - startScroll);
    var value;

    if (isString(ease) && ease == 'ease') {
      // cubic function
      var p0 = 0;
      var p1 = 0;
      var p2 = 0;
      var p3 = 1;
      var mult = (endValue - startValue);
      var offset = startValue;
      p0 *= mult;
      p1 *= mult;
      p2 *= mult;
      p3 *= mult;
      value =
        (1 - t)*p0 +
        3*Math.pow(1 - t, 2)*t*p1 +
        3*(1 - t)*Math.pow(t, 2)*p2 +
        Math.pow(t, 3)*p3;
      value += offset;
    } else {
      // get initial x value
      value = startValue +
              (endValue - startValue)*t;
    }
    return value;
  }
};
/**
 * used to group animations better ex: first and last auto extrema
 * @param {object} values default values
 * @param {object} page the page the animation group will run on
 */
AnimationGroup = function(values, page) {
  this.selector = default_val(values.selector || '');
  this.animations = default_val(values.animations || []);
  this.page = page;
}

/**
 * used to add an animation to the group
 * @param {object} values default values for the new animation
 */
AnimationGroup.prototype.add_animation = function(values) {
  values = values || {};
  if (this.animations[this.animations.length - 1]) {
    this.animations[this.animations.length - 1].extremaHigh = false;
  values.startX = default_val(
    values.startX, this.animations[this.animations.length - 1].endX);
  values.startY = default_val(
    values.startY, this.animations[this.animations.length - 1].endY);
  values.startRot = default_val(
    values.startRot, this.animations[this.animations.length - 1].endRot);
  values.startScroll = default_val(
    values.startScroll, this.animations[this.animations.length - 1].endScroll);
  values.xOrigin = default_val(
    values.xOrigin, this.animations[this.animations.length - 1].xOrigin);
  values.yOrigin = default_val(
    values.yOrigin, this.animations[this.animations.length - 1].yOrigin);
  } else {
    values.extremaLow = default_val(values.extremaLow, true);
  }

  values.selector = default_val(values.selector, this.selector);
  values.extremaHigh = default_val(values.extremaHigh, true);

  var animation = new Animation(values, this.page);
  this.animations.push(animation);
};/**
 * Page object
 * @param {object} values default values
 */
Page = function(values) {
  values = values || {};
  this.minWidth = values.minWidth || 500;
  this.maxWidth = values.maxWidth || 500;
  this.animations = values.animations || [];
  this.animationGroups = values.animationGroups || [];
  this.animationOffset = values.animationOffset || 100;
  this.maxScroll = values.maxScroll || 0;
};

/**
 * used to return the center of the page
 */
Page.prototype.page_center = function() {
  var width = $(window).width();
  if (width < this.minWidth) {
    width = this.minWidth;
  }
  return width/2;
}

/**
 * center object on page
 * @param {string} selector the value of the selector of the object
 * @param {number} offset the offset relative to put the center of the obj
 */
Page.prototype.center = function(selector, offset) {
  offset = offset || 0;
  var page = this;
  $(selector).each(
    function() {
      var width = $(this).width();
      var pageWidth = $(window).width();
      if ($(window).width() < page.minWidth) {
        pageWidth = page.minWidth;
      }
      var position = pageWidth/2 + offset;
      position = position - width/2;
      $(this).css({'left': position});
    }
  );
};

/**
 * used to center a word
 * @param {string} selector selctor to center
 */
Page.prototype.center_word = function(selector) {
  var wordWidth = 0;
  var cumWidth = [];
  var page = this;
  $(selector).each(
    function() {
      cumWidth.push(wordWidth);
      wordWidth += $(this).width();
    }
  );
  var i = 0;
  $(selector).each(
    function() {
      var width = $(this).width();
      var pageWidth = $(window).width();
      if ($(window).width() < page.minWidth) {
        pageWidth = page.minWidth;
      }
      var position = -1*wordWidth/2 + cumWidth[i] + pageWidth/2;
      $(this).css({'left': position});
      i++;
    }
  );
};

/**
 * used to add an animation
 * @param {object} values default value for animation
 */
Page.prototype.add_animation = function(values) {
  var animation = new Animation(values, this);
  this.animations.push(animation);
};

/**
 * used to add an animation group
 * @param {object} values default values for animation
 */
Page.prototype.add_animation_group = function(values) {
  var animationGroup = new AnimationGroup(values, this);
  this.animationGroups.push(animationGroup);
  console.log('added');
}

/**
 * used to animation the animations
 */
Page.prototype.animate = function() {
  this.maxScroll = 0;
  // find the max scroll
  for (var i = 0; i < this.animations.length; i++) {
    var animation = this.animations[i];
    page.max_scroll(animation.endScroll);
  }

  for (var i = 0; i < this.animationGroups.length; i++) {
    var animationGroup = this.animationGroups[i];
    for (var j = 0; j < animationGroup.animations.length; j++) {
      var animation = animationGroup.animations[j];
      this.max_scroll(animation.endScroll);
    }
  }

  $('.page-contents').height(this.maxScroll + $(window).height() + this.animationOffset);

  // Go through each animation
  for (var i = 0; i < this.animations.length; i++) {
    // get all the values into shorter variables
    var animation = this.animations[i];
    this.animate_animation(animation);
  }

  for (var i = 0; i < this.animationGroups.length; i++) {
    var animationGroup = this.animationGroups[i];
    for (var j = 0; j < animationGroup.animations.length; j++) {
      var animation = animationGroup.animations[j];
      this.animate_animation(animation);
    }
  }
};


/**
 * used to animation an animation
 * @param {object} animation the animation to animate
 */
Page.prototype.animate_animation = function(animation) {
  // get all the values into shorter variables
  var selector = animation.selector;
  var startX = animation.startX;
  var endX = animation.endX;
  var startY = animation.startY;
  var endY = animation.endY;
  var startRot = animation.startRot;
  var endRot = animation.endRot;

  // calculate the x and y
  var left = animation.get_x();
  var top = animation.get_y();
  var rot = animation.get_value(startRot, endRot, this.rotEase);

  $(selector).css(
    {'left': left,
     'top': top,
     'transform': 'rotate(' + rot + 'deg)',
     '-ms-transform': 'rotate(' + rot + 'deg)',
     '-webkit-transform': 'rotate(' + rot + 'deg)'}
  );
}

Page.prototype.max_scroll = function(scroll) {
  if (scroll > this.maxScroll) {
    this.maxScroll = scroll;
  }
};
